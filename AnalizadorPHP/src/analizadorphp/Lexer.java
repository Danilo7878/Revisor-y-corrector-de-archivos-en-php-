/* The following code was generated by JFlex 1.6.1 */

package analizadorphp;

import static analizadorphp.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/danil/Desktop/Proyecto de LFA/AnalizadorPHP/src/analizadorphp/Expresiones.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\35\1\100\1\101\1\101\1\100\22\0\1\57\1\62\1\56"+
    "\1\77\1\36\1\67\1\64\1\56\1\76\1\76\1\70\1\52\1\76"+
    "\1\52\1\53\1\66\1\54\1\55\6\2\2\2\1\76\1\76\1\60"+
    "\1\63\1\61\1\71\1\0\1\43\1\42\1\51\1\6\1\45\1\10"+
    "\1\37\1\12\1\13\1\14\1\15\1\40\1\17\1\20\1\41\1\50"+
    "\1\23\1\46\1\44\1\47\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\74\1\76\1\75\1\0\1\1\1\0\1\3\1\4\1\5\1\73"+
    "\1\7\1\10\1\11\1\72\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\76\1\65\1\76\7\0\1\101\u1fa2\0\1\101\1\101"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\25\2\1\4\1\1\1\5"+
    "\1\6\1\3\1\1\2\5\3\1\2\5\1\1\1\7"+
    "\1\2\1\0\3\2\1\10\50\2\7\0\1\11\10\2"+
    "\1\12\24\2\1\10\5\2\1\13\24\2\2\0\2\14"+
    "\1\15\2\0\13\2\1\13\7\2\1\10\27\2\3\0"+
    "\1\7\40\2\2\0\24\2\2\0\1\16\5\2\1\10"+
    "\4\2\2\0\5\2\1\0\5\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\2\0\1\17";

  private static int [] zzUnpackAction() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\102\0\u0672\0\u06b4\0\102\0\u06f6\0\u0738\0\u077a"+
    "\0\u07bc\0\u07bc\0\u07fe\0\u0840\0\u0882\0\102\0\u08c4\0\u0906"+
    "\0\u0948\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u02d6\0\u0a92\0\u0ad4"+
    "\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4"+
    "\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4"+
    "\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104"+
    "\0\u1146\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314"+
    "\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524"+
    "\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\102\0\u16b0\0\u16f2"+
    "\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u098a\0\u18c0"+
    "\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0"+
    "\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0"+
    "\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0"+
    "\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100"+
    "\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310"+
    "\0\u2352\0\u2394\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520"+
    "\0\u1566\0\u15a8\0\102\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u266a"+
    "\0\u26ac\0\u26ee\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u287a"+
    "\0\u02d6\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2a48"+
    "\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58"+
    "\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u2de4\0\u2e26\0\u2e68"+
    "\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4\0\u3036\0\u3078"+
    "\0\u30ba\0\u30fc\0\u313e\0\102\0\u3180\0\u31c2\0\u3204\0\u3246"+
    "\0\u3288\0\u32ca\0\u330c\0\u334e\0\u3390\0\u33d2\0\u3414\0\u3456"+
    "\0\u3498\0\u34da\0\u351c\0\u355e\0\u35a0\0\u35e2\0\u3624\0\u3666"+
    "\0\u36a8\0\u36ea\0\u372c\0\u376e\0\u37b0\0\u37f2\0\u3834\0\u3876"+
    "\0\u38b8\0\u38fa\0\u393c\0\u397e\0\u39c0\0\u3a02\0\u3a44\0\u3a86"+
    "\0\u3ac8\0\u3b0a\0\u3b4c\0\u3b8e\0\u3bd0\0\u3c12\0\u3c54\0\u3c96"+
    "\0\u3cd8\0\u3d1a\0\u3d5c\0\u3d9e\0\u3de0\0\u3e22\0\u3e64\0\u3ea6"+
    "\0\u3ee8\0\u3f2a\0\u3f6c\0\u3fae\0\u02d6\0\u3ff0\0\u4032\0\u4074"+
    "\0\u40b6\0\u40f8\0\u413a\0\u417c\0\u41be\0\u4200\0\u4242\0\u4284"+
    "\0\u42c6\0\u4308\0\u434a\0\u438c\0\u43ce\0\u4410\0\u4452\0\102"+
    "\0\u4494\0\u44d6\0\u4518\0\u455a\0\u459c\0\u45de\0\u4620\0\u4662"+
    "\0\u46a4\0\u46e6\0\u4728\0\u476a\0\u47ac\0\u47ee\0\102";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\2\14\1\16\1\17\1\20"+
    "\1\21\1\22\1\14\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\2\14\1\32\1\33\1\13\1\16\1\21"+
    "\1\6\1\5\1\24\1\11\1\23\1\25\1\22\1\7"+
    "\1\34\1\35\1\36\1\4\1\37\1\32\1\40\2\41"+
    "\1\42\1\43\1\44\1\45\2\46\1\47\1\14\1\10"+
    "\3\35\1\50\1\32\104\0\1\51\33\14\2\0\13\14"+
    "\2\0\2\14\14\0\2\14\10\0\1\4\50\0\1\52"+
    "\2\4\25\0\3\14\1\53\13\14\1\54\3\14\1\55"+
    "\1\56\7\14\2\0\3\14\1\53\1\14\1\56\1\14"+
    "\1\55\3\14\2\0\2\14\14\0\2\14\7\0\20\14"+
    "\1\57\2\14\1\60\10\14\2\0\2\14\1\57\4\14"+
    "\1\60\3\14\2\0\2\14\14\0\2\14\7\0\2\14"+
    "\1\61\12\14\1\62\2\14\1\63\13\14\2\0\1\14"+
    "\1\62\1\63\1\14\1\61\6\14\2\0\2\14\14\0"+
    "\2\14\7\0\6\14\1\64\3\14\1\65\5\14\1\56"+
    "\13\14\2\0\2\14\1\56\3\14\1\64\4\14\2\0"+
    "\2\14\14\0\2\14\7\0\4\14\1\66\10\14\1\67"+
    "\1\70\1\71\7\14\1\72\1\14\1\73\2\14\2\0"+
    "\1\14\1\67\10\14\1\66\2\0\2\14\14\0\2\14"+
    "\7\0\2\14\1\74\7\14\1\75\2\14\1\76\2\14"+
    "\1\77\5\14\1\100\5\14\2\0\1\14\1\76\1\77"+
    "\1\14\1\74\6\14\2\0\2\14\14\0\2\14\7\0"+
    "\15\14\1\101\2\14\1\102\13\14\2\0\1\14\1\101"+
    "\1\102\10\14\2\0\2\14\14\0\2\14\7\0\34\14"+
    "\2\0\13\14\2\0\2\14\14\0\2\14\7\0\7\14"+
    "\1\56\6\14\1\103\1\104\4\14\1\105\1\106\6\14"+
    "\2\0\5\14\1\105\2\14\1\106\2\14\2\0\2\14"+
    "\14\0\2\14\7\0\12\14\1\107\21\14\2\0\13\14"+
    "\2\0\2\14\14\0\2\14\7\0\12\14\1\110\21\14"+
    "\2\0\13\14\2\0\2\14\14\0\2\14\7\0\2\14"+
    "\1\111\3\14\1\112\17\14\1\113\5\14\2\0\4\14"+
    "\1\111\1\14\1\112\4\14\2\0\2\14\14\0\2\14"+
    "\7\0\3\14\1\114\17\14\1\56\10\14\2\0\3\14"+
    "\1\114\3\14\1\56\3\14\2\0\2\14\14\0\2\14"+
    "\7\0\23\14\1\115\2\14\1\116\5\14\2\0\7\14"+
    "\1\115\3\14\2\0\2\14\14\0\2\14\7\0\6\14"+
    "\1\117\25\14\2\0\6\14\1\117\4\14\2\0\2\14"+
    "\14\0\2\14\7\0\25\14\1\120\2\14\1\121\3\14"+
    "\2\0\10\14\1\120\2\14\2\0\2\14\14\0\2\14"+
    "\7\0\11\14\1\122\11\14\1\123\10\14\2\0\7\14"+
    "\1\123\3\14\2\0\2\14\14\0\1\122\1\14\7\0"+
    "\17\14\1\105\4\14\1\65\7\14\2\0\5\14\1\65"+
    "\5\14\2\0\2\14\14\0\2\14\7\0\2\14\1\124"+
    "\15\14\1\125\13\14\2\0\2\14\1\125\1\14\1\124"+
    "\6\14\2\0\2\14\14\0\2\14\7\0\11\14\1\126"+
    "\22\14\2\0\13\14\2\0\2\14\14\0\1\126\1\14"+
    "\7\0\20\14\1\124\13\14\2\0\2\14\1\124\10\14"+
    "\2\0\2\14\14\0\2\14\32\0\1\127\12\0\1\130"+
    "\44\0\1\4\51\0\1\36\1\4\26\0\1\4\1\0"+
    "\1\131\25\0\1\132\7\0\1\131\10\0\1\52\2\4"+
    "\25\0\34\133\2\0\13\133\2\0\2\133\1\0\1\133"+
    "\12\0\2\133\71\0\1\46\5\0\1\134\73\0\1\46"+
    "\102\0\1\46\102\0\1\46\102\0\1\50\1\0\1\135"+
    "\72\0\1\136\20\0\100\50\3\0\4\14\1\137\1\140"+
    "\1\14\1\141\1\14\1\142\3\14\1\143\1\144\1\145"+
    "\5\14\1\146\6\14\2\0\1\14\1\143\6\14\1\146"+
    "\1\14\1\137\2\0\2\14\14\0\1\142\1\140\10\0"+
    "\1\147\51\0\2\147\25\0\24\14\1\150\7\14\2\0"+
    "\5\14\1\150\5\14\2\0\2\14\14\0\2\14\7\0"+
    "\5\14\1\56\26\14\2\0\13\14\2\0\2\14\14\0"+
    "\1\14\1\56\7\0\23\14\1\151\10\14\2\0\7\14"+
    "\1\151\3\14\2\0\2\14\14\0\2\14\7\0\20\14"+
    "\1\152\13\14\2\0\2\14\1\152\10\14\2\0\2\14"+
    "\14\0\2\14\7\0\6\14\1\153\25\14\2\0\6\14"+
    "\1\153\4\14\2\0\2\14\14\0\2\14\7\0\15\14"+
    "\1\154\6\14\1\65\1\155\6\14\2\0\1\14\1\154"+
    "\3\14\1\65\2\14\1\155\2\14\2\0\2\14\14\0"+
    "\2\14\7\0\2\14\1\156\15\14\1\157\13\14\2\0"+
    "\2\14\1\157\1\14\1\156\6\14\2\0\2\14\14\0"+
    "\2\14\7\0\17\14\1\160\14\14\2\0\13\14\2\0"+
    "\2\14\14\0\2\14\7\0\4\14\1\161\2\14\1\162"+
    "\24\14\2\0\12\14\1\161\2\0\2\14\14\0\2\14"+
    "\7\0\6\14\1\56\25\14\2\0\6\14\1\56\4\14"+
    "\2\0\2\14\14\0\2\14\7\0\11\14\1\163\22\14"+
    "\2\0\13\14\2\0\2\14\14\0\1\163\1\14\7\0"+
    "\24\14\1\164\7\14\2\0\5\14\1\164\5\14\2\0"+
    "\2\14\14\0\2\14\7\0\21\14\1\165\12\14\2\0"+
    "\11\14\1\165\1\14\2\0\2\14\14\0\2\14\7\0"+
    "\5\14\1\166\26\14\2\0\13\14\2\0\2\14\14\0"+
    "\1\14\1\166\7\0\2\14\1\167\31\14\2\0\4\14"+
    "\1\167\6\14\2\0\2\14\14\0\2\14\7\0\12\14"+
    "\1\170\12\14\1\171\6\14\2\0\10\14\1\171\2\14"+
    "\2\0\2\14\14\0\2\14\7\0\15\14\1\172\16\14"+
    "\2\0\1\14\1\172\11\14\2\0\2\14\14\0\2\14"+
    "\7\0\17\14\1\72\14\14\2\0\13\14\2\0\2\14"+
    "\14\0\2\14\7\0\20\14\1\173\13\14\2\0\2\14"+
    "\1\173\10\14\2\0\2\14\14\0\2\14\7\0\23\14"+
    "\1\174\10\14\2\0\7\14\1\174\3\14\2\0\2\14"+
    "\14\0\2\14\7\0\17\14\1\175\14\14\2\0\13\14"+
    "\2\0\2\14\14\0\2\14\7\0\20\14\1\176\13\14"+
    "\2\0\2\14\1\176\10\14\2\0\2\14\14\0\2\14"+
    "\7\0\25\14\1\163\6\14\2\0\10\14\1\163\2\14"+
    "\2\0\2\14\14\0\2\14\7\0\21\14\1\177\12\14"+
    "\2\0\11\14\1\177\1\14\2\0\2\14\14\0\2\14"+
    "\7\0\4\14\1\200\17\14\1\201\1\202\6\14\2\0"+
    "\5\14\1\201\2\14\1\202\1\14\1\200\2\0\2\14"+
    "\14\0\2\14\7\0\24\14\1\203\7\14\2\0\5\14"+
    "\1\203\5\14\2\0\2\14\14\0\2\14\7\0\6\14"+
    "\1\204\25\14\2\0\6\14\1\204\4\14\2\0\2\14"+
    "\14\0\2\14\7\0\24\14\1\170\7\14\2\0\5\14"+
    "\1\170\5\14\2\0\2\14\14\0\2\14\7\0\31\14"+
    "\1\205\2\14\2\0\13\14\2\0\2\14\14\0\2\14"+
    "\7\0\16\14\1\206\15\14\2\0\13\14\2\0\2\14"+
    "\14\0\2\14\7\0\30\14\1\56\3\14\2\0\13\14"+
    "\2\0\2\14\14\0\2\14\7\0\15\14\1\152\1\207"+
    "\15\14\2\0\1\14\1\152\11\14\2\0\2\14\14\0"+
    "\2\14\7\0\13\14\1\210\20\14\2\0\13\14\2\0"+
    "\2\14\14\0\2\14\7\0\12\14\1\211\5\14\1\212"+
    "\13\14\2\0\2\14\1\212\10\14\2\0\2\14\14\0"+
    "\2\14\7\0\3\14\1\213\30\14\2\0\3\14\1\213"+
    "\7\14\2\0\2\14\14\0\2\14\7\0\22\14\1\214"+
    "\1\14\1\215\1\216\6\14\2\0\5\14\1\215\2\14"+
    "\1\216\2\14\2\0\2\14\14\0\2\14\7\0\2\14"+
    "\1\217\20\14\1\220\10\14\2\0\4\14\1\217\2\14"+
    "\1\220\3\14\2\0\2\14\14\0\2\14\7\0\12\14"+
    "\1\221\21\14\2\0\13\14\2\0\2\14\14\0\2\14"+
    "\7\0\23\14\1\222\10\14\2\0\7\14\1\222\3\14"+
    "\2\0\2\14\14\0\2\14\7\0\2\14\1\223\23\14"+
    "\1\224\3\14\1\56\1\14\2\0\4\14\1\223\6\14"+
    "\2\0\2\14\14\0\2\14\7\0\23\14\1\56\10\14"+
    "\2\0\7\14\1\56\3\14\2\0\2\14\14\0\2\14"+
    "\7\0\12\14\1\225\21\14\2\0\13\14\2\0\2\14"+
    "\14\0\2\14\7\0\12\14\1\226\21\14\2\0\13\14"+
    "\2\0\2\14\14\0\2\14\15\0\1\227\132\0\1\230"+
    "\115\0\2\231\26\0\7\232\31\0\2\232\1\0\1\232"+
    "\3\0\1\232\2\0\2\232\15\0\1\232\64\0\1\233"+
    "\45\0\1\234\57\0\66\135\1\0\1\135\1\235\11\135"+
    "\1\0\15\14\1\236\16\14\2\0\1\14\1\236\11\14"+
    "\2\0\2\14\14\0\2\14\7\0\12\14\1\237\21\14"+
    "\2\0\13\14\2\0\2\14\14\0\2\14\7\0\12\14"+
    "\1\240\13\14\1\241\5\14\2\0\13\14\2\0\2\14"+
    "\14\0\2\14\7\0\2\14\1\242\31\14\2\0\4\14"+
    "\1\242\6\14\2\0\2\14\14\0\2\14\7\0\12\14"+
    "\1\243\21\14\2\0\13\14\2\0\2\14\14\0\2\14"+
    "\7\0\6\14\1\244\25\14\2\0\6\14\1\244\4\14"+
    "\2\0\2\14\14\0\2\14\7\0\2\14\1\245\31\14"+
    "\2\0\4\14\1\245\6\14\2\0\2\14\14\0\2\14"+
    "\7\0\23\14\1\246\10\14\2\0\7\14\1\246\3\14"+
    "\2\0\2\14\14\0\2\14\7\0\25\14\1\247\6\14"+
    "\2\0\10\14\1\247\2\14\2\0\2\14\14\0\2\14"+
    "\7\0\2\14\1\250\31\14\2\0\4\14\1\250\6\14"+
    "\2\0\2\14\14\0\2\14\7\0\15\14\1\251\16\14"+
    "\2\0\1\14\1\251\11\14\2\0\2\14\14\0\2\14"+
    "\7\0\2\14\1\252\31\14\2\0\4\14\1\252\6\14"+
    "\2\0\2\14\14\0\2\14\7\0\15\14\1\253\16\14"+
    "\2\0\1\14\1\253\11\14\2\0\2\14\14\0\2\14"+
    "\7\0\4\14\1\254\27\14\2\0\12\14\1\254\2\0"+
    "\2\14\14\0\2\14\7\0\24\14\1\255\7\14\2\0"+
    "\5\14\1\255\5\14\2\0\2\14\14\0\2\14\7\0"+
    "\17\14\1\65\14\14\2\0\13\14\2\0\2\14\14\0"+
    "\2\14\7\0\24\14\1\170\1\256\6\14\2\0\5\14"+
    "\1\170\2\14\1\256\2\14\2\0\2\14\14\0\2\14"+
    "\7\0\15\14\1\257\16\14\2\0\1\14\1\257\11\14"+
    "\2\0\2\14\14\0\2\14\7\0\2\14\1\260\31\14"+
    "\2\0\4\14\1\260\6\14\2\0\2\14\14\0\2\14"+
    "\7\0\20\14\1\56\13\14\2\0\2\14\1\56\10\14"+
    "\2\0\2\14\14\0\2\14\7\0\6\14\1\261\25\14"+
    "\2\0\6\14\1\261\4\14\2\0\2\14\14\0\2\14"+
    "\7\0\25\14\1\250\6\14\2\0\10\14\1\250\2\14"+
    "\2\0\2\14\14\0\2\14\7\0\5\14\1\262\1\14"+
    "\1\263\2\14\1\264\11\14\1\265\3\14\1\30\3\14"+
    "\2\0\5\14\1\265\5\14\2\0\2\14\14\0\1\14"+
    "\1\262\7\0\15\14\1\56\16\14\2\0\1\14\1\56"+
    "\11\14\2\0\2\14\14\0\2\14\7\0\25\14\1\56"+
    "\6\14\2\0\10\14\1\56\2\14\2\0\2\14\14\0"+
    "\2\14\7\0\6\14\1\266\25\14\2\0\6\14\1\266"+
    "\4\14\2\0\2\14\14\0\2\14\7\0\24\14\1\224"+
    "\7\14\2\0\5\14\1\224\5\14\2\0\2\14\14\0"+
    "\2\14\7\0\2\14\1\267\31\14\2\0\4\14\1\267"+
    "\6\14\2\0\2\14\14\0\2\14\7\0\6\14\1\270"+
    "\25\14\2\0\6\14\1\270\4\14\2\0\2\14\14\0"+
    "\2\14\7\0\4\14\1\271\27\14\2\0\12\14\1\271"+
    "\2\0\2\14\14\0\2\14\7\0\3\14\1\72\30\14"+
    "\2\0\3\14\1\72\7\14\2\0\2\14\14\0\2\14"+
    "\7\0\15\14\1\272\16\14\2\0\1\14\1\272\11\14"+
    "\2\0\2\14\14\0\2\14\7\0\15\14\1\273\16\14"+
    "\2\0\1\14\1\273\11\14\2\0\2\14\14\0\2\14"+
    "\7\0\25\14\1\274\6\14\2\0\10\14\1\274\2\14"+
    "\2\0\2\14\14\0\2\14\7\0\6\14\1\275\25\14"+
    "\2\0\6\14\1\275\4\14\2\0\2\14\14\0\2\14"+
    "\7\0\6\14\1\170\25\14\2\0\6\14\1\170\4\14"+
    "\2\0\2\14\14\0\2\14\7\0\23\14\1\276\10\14"+
    "\2\0\7\14\1\276\3\14\2\0\2\14\14\0\2\14"+
    "\7\0\6\14\1\225\25\14\2\0\6\14\1\225\4\14"+
    "\2\0\2\14\14\0\2\14\7\0\6\14\1\277\25\14"+
    "\2\0\6\14\1\277\4\14\2\0\2\14\14\0\2\14"+
    "\7\0\6\14\1\300\25\14\2\0\6\14\1\300\4\14"+
    "\2\0\2\14\14\0\2\14\7\0\6\14\1\301\25\14"+
    "\2\0\6\14\1\301\4\14\2\0\2\14\14\0\2\14"+
    "\7\0\17\14\1\170\7\14\1\302\4\14\2\0\13\14"+
    "\2\0\2\14\14\0\2\14\7\0\25\14\1\303\6\14"+
    "\2\0\10\14\1\303\2\14\2\0\2\14\14\0\2\14"+
    "\7\0\15\14\1\304\16\14\2\0\1\14\1\304\11\14"+
    "\2\0\2\14\14\0\2\14\7\0\26\14\1\305\5\14"+
    "\2\0\13\14\2\0\2\14\14\0\2\14\7\0\20\14"+
    "\1\306\13\14\2\0\2\14\1\306\10\14\2\0\2\14"+
    "\14\0\2\14\7\0\26\14\1\307\5\14\2\0\13\14"+
    "\2\0\2\14\14\0\2\14\7\0\25\14\1\304\6\14"+
    "\2\0\10\14\1\304\2\14\2\0\2\14\14\0\2\14"+
    "\7\0\12\14\1\310\21\14\2\0\13\14\2\0\2\14"+
    "\14\0\2\14\7\0\25\14\1\155\6\14\2\0\10\14"+
    "\1\155\2\14\2\0\2\14\14\0\2\14\7\0\20\14"+
    "\1\112\13\14\2\0\2\14\1\112\10\14\2\0\2\14"+
    "\14\0\2\14\7\0\12\14\1\170\21\14\2\0\13\14"+
    "\2\0\2\14\14\0\2\14\7\0\6\14\1\251\25\14"+
    "\2\0\6\14\1\251\4\14\2\0\2\14\14\0\2\14"+
    "\7\0\5\14\1\251\26\14\2\0\13\14\2\0\2\14"+
    "\14\0\1\14\1\251\7\0\15\14\1\65\16\14\2\0"+
    "\1\14\1\65\11\14\2\0\2\14\14\0\2\14\13\0"+
    "\1\311\135\0\1\312\132\0\1\313\75\0\1\314\14\0"+
    "\2\14\1\315\31\14\2\0\4\14\1\315\6\14\2\0"+
    "\2\14\14\0\2\14\7\0\23\14\1\316\10\14\2\0"+
    "\7\14\1\316\3\14\2\0\2\14\14\0\2\14\7\0"+
    "\15\14\1\317\16\14\2\0\1\14\1\317\11\14\2\0"+
    "\2\14\14\0\2\14\7\0\17\14\1\320\14\14\2\0"+
    "\13\14\2\0\2\14\14\0\2\14\7\0\15\14\1\321"+
    "\16\14\2\0\1\14\1\321\11\14\2\0\2\14\14\0"+
    "\2\14\7\0\17\14\1\317\14\14\2\0\13\14\2\0"+
    "\2\14\14\0\2\14\7\0\25\14\1\322\6\14\2\0"+
    "\10\14\1\322\2\14\2\0\2\14\14\0\2\14\7\0"+
    "\16\14\1\323\15\14\2\0\13\14\2\0\2\14\14\0"+
    "\2\14\7\0\2\14\1\324\31\14\2\0\4\14\1\324"+
    "\6\14\2\0\2\14\14\0\2\14\7\0\23\14\1\325"+
    "\10\14\2\0\7\14\1\325\3\14\2\0\2\14\14\0"+
    "\2\14\7\0\32\14\1\56\1\14\2\0\13\14\2\0"+
    "\2\14\14\0\2\14\7\0\14\14\1\56\17\14\2\0"+
    "\13\14\2\0\2\14\14\0\2\14\7\0\2\14\1\326"+
    "\31\14\2\0\4\14\1\326\6\14\2\0\2\14\14\0"+
    "\2\14\7\0\11\14\1\56\22\14\2\0\13\14\2\0"+
    "\2\14\14\0\1\56\1\14\7\0\24\14\1\56\7\14"+
    "\2\0\5\14\1\56\5\14\2\0\2\14\14\0\2\14"+
    "\7\0\12\14\1\327\21\14\2\0\13\14\2\0\2\14"+
    "\14\0\2\14\7\0\2\14\1\330\31\14\2\0\4\14"+
    "\1\330\6\14\2\0\2\14\14\0\2\14\7\0\26\14"+
    "\1\331\5\14\2\0\13\14\2\0\2\14\14\0\2\14"+
    "\7\0\12\14\1\264\21\14\2\0\13\14\2\0\2\14"+
    "\14\0\2\14\7\0\6\14\1\332\25\14\2\0\6\14"+
    "\1\332\4\14\2\0\2\14\14\0\2\14\7\0\20\14"+
    "\1\77\13\14\2\0\2\14\1\77\10\14\2\0\2\14"+
    "\14\0\2\14\7\0\7\14\1\56\24\14\2\0\13\14"+
    "\2\0\2\14\14\0\2\14\7\0\30\14\1\121\3\14"+
    "\2\0\13\14\2\0\2\14\14\0\2\14\7\0\17\14"+
    "\1\333\14\14\2\0\13\14\2\0\2\14\14\0\2\14"+
    "\7\0\25\14\1\251\6\14\2\0\10\14\1\251\2\14"+
    "\2\0\2\14\14\0\2\14\7\0\2\14\1\155\31\14"+
    "\2\0\4\14\1\155\6\14\2\0\2\14\14\0\2\14"+
    "\7\0\25\14\1\334\6\14\2\0\10\14\1\334\2\14"+
    "\2\0\2\14\14\0\2\14\7\0\6\14\1\335\25\14"+
    "\2\0\6\14\1\335\4\14\2\0\2\14\14\0\2\14"+
    "\7\0\26\14\1\336\5\14\2\0\13\14\2\0\2\14"+
    "\14\0\2\14\7\0\2\14\1\337\3\14\1\340\25\14"+
    "\2\0\4\14\1\337\1\14\1\340\4\14\2\0\2\14"+
    "\14\0\2\14\7\0\10\14\1\341\12\14\1\342\10\14"+
    "\2\0\1\341\6\14\1\342\3\14\2\0\2\14\14\0"+
    "\2\14\7\0\2\14\1\343\31\14\2\0\4\14\1\343"+
    "\6\14\2\0\2\14\14\0\2\14\7\0\24\14\1\344"+
    "\7\14\2\0\5\14\1\344\5\14\2\0\2\14\14\0"+
    "\2\14\7\0\23\14\1\345\10\14\2\0\7\14\1\345"+
    "\3\14\2\0\2\14\14\0\2\14\7\0\4\14\1\267"+
    "\27\14\2\0\12\14\1\267\2\0\2\14\14\0\2\14"+
    "\7\0\2\14\1\346\31\14\2\0\4\14\1\346\6\14"+
    "\2\0\2\14\14\0\2\14\7\0\6\14\1\347\25\14"+
    "\2\0\6\14\1\347\4\14\2\0\2\14\14\0\2\14"+
    "\7\0\12\14\1\350\21\14\2\0\13\14\2\0\2\14"+
    "\14\0\2\14\7\0\12\14\1\351\21\14\2\0\13\14"+
    "\2\0\2\14\14\0\2\14\7\0\26\14\1\352\5\14"+
    "\2\0\13\14\2\0\2\14\14\0\2\14\7\0\23\14"+
    "\1\353\10\14\2\0\7\14\1\353\3\14\2\0\2\14"+
    "\14\0\2\14\7\0\17\14\1\354\14\14\2\0\13\14"+
    "\2\0\2\14\14\0\2\14\27\0\1\355\122\0\1\356"+
    "\61\0\1\136\60\0\24\14\1\357\7\14\2\0\5\14"+
    "\1\357\5\14\2\0\2\14\14\0\2\14\7\0\1\360"+
    "\33\14\2\0\13\14\2\0\2\14\14\0\2\14\7\0"+
    "\6\14\1\316\25\14\2\0\6\14\1\316\4\14\2\0"+
    "\2\14\14\0\2\14\7\0\4\14\1\361\27\14\2\0"+
    "\12\14\1\361\2\0\2\14\14\0\2\14\7\0\25\14"+
    "\1\362\6\14\2\0\10\14\1\362\2\14\2\0\2\14"+
    "\14\0\2\14\7\0\11\14\1\363\22\14\2\0\13\14"+
    "\2\0\2\14\14\0\1\363\1\14\7\0\6\14\1\364"+
    "\25\14\2\0\6\14\1\364\4\14\2\0\2\14\14\0"+
    "\2\14\7\0\12\14\1\365\21\14\2\0\13\14\2\0"+
    "\2\14\14\0\2\14\7\0\2\14\1\366\31\14\2\0"+
    "\4\14\1\366\6\14\2\0\2\14\14\0\2\14\7\0"+
    "\3\14\1\226\30\14\2\0\3\14\1\226\7\14\2\0"+
    "\2\14\14\0\2\14\7\0\17\14\1\367\14\14\2\0"+
    "\13\14\2\0\2\14\14\0\2\14\7\0\23\14\1\65"+
    "\10\14\2\0\7\14\1\65\3\14\2\0\2\14\14\0"+
    "\2\14\7\0\15\14\1\170\16\14\2\0\1\14\1\170"+
    "\11\14\2\0\2\14\14\0\2\14\7\0\4\14\1\161"+
    "\27\14\2\0\12\14\1\161\2\0\2\14\14\0\2\14"+
    "\7\0\5\14\1\255\26\14\2\0\13\14\2\0\2\14"+
    "\14\0\1\14\1\255\7\0\12\14\1\370\21\14\2\0"+
    "\13\14\2\0\2\14\14\0\2\14\7\0\16\14\1\371"+
    "\15\14\2\0\13\14\2\0\2\14\14\0\2\14\7\0"+
    "\5\14\1\372\26\14\2\0\13\14\2\0\2\14\14\0"+
    "\1\14\1\372\7\0\17\14\1\373\14\14\2\0\13\14"+
    "\2\0\2\14\14\0\2\14\7\0\2\14\1\374\31\14"+
    "\2\0\4\14\1\374\6\14\2\0\2\14\14\0\2\14"+
    "\7\0\6\14\1\375\25\14\2\0\6\14\1\375\4\14"+
    "\2\0\2\14\14\0\2\14\7\0\7\14\1\376\24\14"+
    "\2\0\13\14\2\0\2\14\14\0\2\14\7\0\3\14"+
    "\1\377\30\14\2\0\3\14\1\377\7\14\2\0\2\14"+
    "\14\0\2\14\7\0\21\14\1\376\12\14\2\0\11\14"+
    "\1\376\1\14\2\0\2\14\14\0\2\14\7\0\12\14"+
    "\1\u0100\21\14\2\0\13\14\2\0\2\14\14\0\2\14"+
    "\7\0\25\14\1\65\6\14\2\0\10\14\1\65\2\14"+
    "\2\0\2\14\14\0\2\14\7\0\4\14\1\u0101\27\14"+
    "\2\0\12\14\1\u0101\2\0\2\14\14\0\2\14\7\0"+
    "\4\14\1\56\27\14\2\0\12\14\1\56\2\0\2\14"+
    "\14\0\2\14\7\0\23\14\1\372\10\14\2\0\7\14"+
    "\1\372\3\14\2\0\2\14\14\0\2\14\7\0\23\14"+
    "\1\u0102\10\14\2\0\7\14\1\u0102\3\14\2\0\2\14"+
    "\14\0\2\14\7\0\17\14\1\56\14\14\2\0\13\14"+
    "\2\0\2\14\14\0\2\14\7\0\10\14\1\251\23\14"+
    "\2\0\1\251\12\14\2\0\2\14\14\0\2\14\32\0"+
    "\1\u0103\120\0\1\u0104\37\0\24\14\1\316\7\14\2\0"+
    "\5\14\1\316\5\14\2\0\2\14\14\0\2\14\7\0"+
    "\1\u0105\33\14\2\0\13\14\2\0\2\14\14\0\2\14"+
    "\7\0\25\14\1\u0106\6\14\2\0\10\14\1\u0106\2\14"+
    "\2\0\2\14\14\0\2\14\7\0\1\u0107\33\14\2\0"+
    "\13\14\2\0\2\14\14\0\2\14\7\0\20\14\1\u0108"+
    "\13\14\2\0\2\14\1\u0108\10\14\2\0\2\14\14\0"+
    "\2\14\7\0\24\14\1\u0109\7\14\2\0\5\14\1\u0109"+
    "\5\14\2\0\2\14\14\0\2\14\7\0\25\14\1\316"+
    "\6\14\2\0\10\14\1\316\2\14\2\0\2\14\14\0"+
    "\2\14\7\0\4\14\1\170\27\14\2\0\12\14\1\170"+
    "\2\0\2\14\14\0\2\14\7\0\26\14\1\65\5\14"+
    "\2\0\13\14\2\0\2\14\14\0\2\14\7\0\20\14"+
    "\1\353\13\14\2\0\2\14\1\353\10\14\2\0\2\14"+
    "\14\0\2\14\7\0\6\14\1\u010a\25\14\2\0\6\14"+
    "\1\u010a\4\14\2\0\2\14\14\0\2\14\7\0\6\14"+
    "\1\u010b\25\14\2\0\6\14\1\u010b\4\14\2\0\2\14"+
    "\14\0\2\14\7\0\4\14\1\u010c\27\14\2\0\12\14"+
    "\1\u010c\2\0\2\14\14\0\2\14\7\0\5\14\1\u010d"+
    "\26\14\2\0\13\14\2\0\2\14\14\0\1\14\1\u010d"+
    "\7\0\23\14\1\251\10\14\2\0\7\14\1\251\3\14"+
    "\2\0\2\14\14\0\2\14\7\0\2\14\1\u010e\31\14"+
    "\2\0\4\14\1\u010e\6\14\2\0\2\14\14\0\2\14"+
    "\7\0\15\14\1\224\16\14\2\0\1\14\1\224\11\14"+
    "\2\0\2\14\14\0\2\14\7\0\4\14\1\251\27\14"+
    "\2\0\12\14\1\251\2\0\2\14\14\0\2\14\7\0"+
    "\25\14\1\u010f\6\14\2\0\10\14\1\u010f\2\14\2\0"+
    "\2\14\14\0\2\14\7\0\4\14\1\205\27\14\2\0"+
    "\12\14\1\205\2\0\2\14\14\0\2\14\101\0\1\u0110"+
    "\46\0\1\u0111\42\0\12\14\1\u0112\21\14\2\0\13\14"+
    "\2\0\2\14\14\0\2\14\7\0\4\14\1\u0113\27\14"+
    "\2\0\12\14\1\u0113\2\0\2\14\14\0\2\14\7\0"+
    "\5\14\1\316\26\14\2\0\13\14\2\0\2\14\14\0"+
    "\1\14\1\316\7\0\21\14\1\u0114\12\14\2\0\11\14"+
    "\1\u0114\1\14\2\0\2\14\14\0\2\14\7\0\17\14"+
    "\1\u0115\14\14\2\0\13\14\2\0\2\14\14\0\2\14"+
    "\7\0\1\u0116\33\14\2\0\13\14\2\0\2\14\14\0"+
    "\2\14\7\0\6\14\1\u010d\25\14\2\0\6\14\1\u010d"+
    "\4\14\2\0\2\14\14\0\2\14\7\0\20\14\1\264"+
    "\13\14\2\0\2\14\1\264\10\14\2\0\2\14\14\0"+
    "\2\14\7\0\4\14\1\65\27\14\2\0\12\14\1\65"+
    "\2\0\2\14\14\0\2\14\7\0\6\14\1\54\25\14"+
    "\2\0\6\14\1\54\4\14\2\0\2\14\14\0\2\14"+
    "\33\0\1\u0117\120\0\1\u0118\36\0\20\14\1\u0119\13\14"+
    "\2\0\2\14\1\u0119\10\14\2\0\2\14\14\0\2\14"+
    "\7\0\20\14\1\u011a\13\14\2\0\2\14\1\u011a\10\14"+
    "\2\0\2\14\14\0\2\14\7\0\2\14\1\u011b\31\14"+
    "\2\0\4\14\1\u011b\6\14\2\0\2\14\14\0\2\14"+
    "\7\0\25\14\1\255\6\14\2\0\10\14\1\255\2\14"+
    "\2\0\2\14\14\0\2\14\7\0\20\14\1\u011c\13\14"+
    "\2\0\2\14\1\u011c\10\14\2\0\2\14\14\0\2\14"+
    "\15\0\1\u011d\73\0\17\14\1\316\14\14\2\0\13\14"+
    "\2\0\2\14\14\0\2\14\7\0\16\14\1\u011e\15\14"+
    "\2\0\13\14\2\0\2\14\14\0\2\14\7\0\4\14"+
    "\1\317\27\14\2\0\12\14\1\317\2\0\2\14\14\0"+
    "\2\14\7\0\17\14\1\u010e\14\14\2\0\13\14\2\0"+
    "\2\14\14\0\2\14\34\0\1\u011f\54\0\21\14\1\u0120"+
    "\12\14\2\0\11\14\1\u0120\1\14\2\0\2\14\14\0"+
    "\2\14\102\0\1\u0121\6\0\12\14\1\u0122\21\14\2\0"+
    "\13\14\2\0\2\14\14\0\2\14\64\0\1\u0123\24\0"+
    "\15\14\1\u0124\16\14\2\0\1\14\1\u0124\11\14\2\0"+
    "\2\14\14\0\2\14\7\0\34\u0125\2\0\13\u0125\2\0"+
    "\2\u0125\14\0\2\u0125\7\0\6\14\1\124\25\14\2\0"+
    "\6\14\1\124\4\14\2\0\2\14\14\0\2\14\64\0"+
    "\1\u0126\120\0\1\u0127\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18480];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\27\1\1\11\2\1\1\11\10\1\1\11"+
    "\3\1\1\0\54\1\7\0\1\11\70\1\2\0\2\1"+
    "\1\11\2\0\53\1\3\0\1\11\40\1\2\0\24\1"+
    "\2\0\13\1\2\0\5\1\1\0\1\11\4\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 234) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            }
          case 16: break;
          case 2: 
            { lexeme = yytext(); return ID;
            }
          case 17: break;
          case 3: 
            { lexeme = yytext(); return INT;
            }
          case 18: break;
          case 4: 
            { return SPACE;
            }
          case 19: break;
          case 5: 
            { lexeme = yytext(); return OPERADORES;
            }
          case 20: break;
          case 6: 
            { lexeme = yytext(); return SYMB;
            }
          case 21: break;
          case 7: 
            { lexeme = yytext(); return COMENT;
            }
          case 22: break;
          case 8: 
            { lexeme = yytext(); return EDC;
            }
          case 23: break;
          case 9: 
            { lexeme = yytext(); return LLAVES;
            }
          case 24: break;
          case 10: 
            { lexeme = yytext(); return FLOAT;
            }
          case 25: break;
          case 11: 
            { lexeme = yytext(); return RESERVEDWORD;
            }
          case 26: break;
          case 12: 
            { lexeme = yytext(); return NUM;
            }
          case 27: break;
          case 13: 
            { lexeme = yytext(); return STRING;
            }
          case 28: break;
          case 14: 
            { lexeme = yytext(); return CTC;
            }
          case 29: break;
          case 15: 
            { lexeme = yytext(); return BD;
            }
          case 30: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
